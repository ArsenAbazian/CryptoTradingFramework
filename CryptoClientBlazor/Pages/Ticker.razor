@page "/ticker"

@using CryptoClientBlazor.Data
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@inject NavigationManager NavManager
@inject ExchangeService ExchangeService; 


@if (this.ticker == null)
{
    
}
else
{
<div class="ticker-info-bar bg-primary">
    <div class="vertical-cell">
        <h2 class="text-white">@(ticker?.MarketCurrency)</h2>
    </div>
    <div class="vertical-cell">
        <em class="text-white-50">@status</em>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">Last Price</div>
        <div class="ticker-bar-value">@lastValue</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">24h Change</div>
        <div class="ticker-bar-value">@change24</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">24h Low</div>
        <div class="ticker-bar-value">@low24</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">24h High</div>
        <div class="ticker-bar-value">@high24</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">Volume</div>
        <div class="ticker-bar-value">@volume</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">Market balance</div>
        <div class="ticker-bar-value">@balanceMarket</div>
    </div>
    <div class="vertical-cell">
        <div class="ticker-bar-header">Base balance</div>
        <div class="ticker-bar-value">@balanceBase</div>
    </div>
</div>
<div class="ticker-form-container">
    <div class="ticker-order-book-container">
        <div class="ticker-order-book-inner-contaner">
            <DxDataGrid CssClass="ticker-order-book" Data="@asks" @ref="@asksGrid" VerticalScrollableHeight="500" PageSize="10000" VerticalScrollBarMode="ScrollBarMode.Visible">
                <DxDataGridColumn Field="Value" Caption="PRICE">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).ValueString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="Amount" Caption="AMOUNT">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).AmountString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="Total" Caption="TOTAL">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).VolumeString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
            </DxDataGrid>
            <DxDataGrid CssClass="ticker-order-book" Data="@bids" @ref="@bidsGrid" VerticalScrollableHeight="500" PageSize="10000" VerticalScrollBarMode="ScrollBarMode.Visible">
                <DxDataGridColumn Field="ValueString" Caption="PRICE">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).ValueString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="AmountString" Caption="AMOUNT">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).AmountString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="Total" Caption="TOTAL">
                    <DisplayTemplate>
                        <div class='order-book-cell-value'>@(((CryptoMarketClient.OrderBookEntry)context).VolumeString)</div>
                    </DisplayTemplate>
                </DxDataGridColumn>
            </DxDataGrid>
        </div>
    </div>    
</div>

    }

    @code {
        private CryptoMarketClient.Ticker ticker;
        private CryptoMarketClient.ExchangeType exchangeType;
        private CryptoMarketClient.Exchange exchange;
        private string tickerName;
        private string status = "Connecting...";
        private string lastValue = "";
        private string change24 = "";
        private string low24 = "";
        private string high24 = "";
        private string volume = "";
        private string balanceMarket = "";
        private string balanceBase = "";
        
        DxDataGrid<CryptoMarketClient.OrderBookEntry> bidsGrid;
        DxDataGrid<CryptoMarketClient.OrderBookEntry> asksGrid;

        private List<CryptoMarketClient.OrderBookEntry> bids;
        private List<CryptoMarketClient.OrderBookEntry> asks;

        protected override void OnInitialized()
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("e", out var etype))
            {
                this.exchangeType = Enum.Parse<CryptoMarketClient.ExchangeType>(etype);
                this.exchange = CryptoMarketClient.Exchange.Get(this.exchangeType);
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("t", out var tn))
                {
                    this.tickerName = tn.ToString();
                    this.ticker = this.exchange.GetTicker(this.tickerName);
                    if (this.ticker == null)
                    {
                        this.status = "Error connecting.";
                        return;
                    }
                    UpdateTickerBar();
                    InitializeOrderBook();
                    SubscribeEvents();
                    this.exchange.StartListenTickerStream(this.ticker);
                }
            }
            else
            {
                this.status = "Error connecting...";
            }

        }

        void InitializeOrderBook()
        {
            this.bids = this.ticker.OrderBook.Bids;
            this.asks = this.ticker.OrderBook.Asks;
        }

        void SubscribeEvents()
        {
            if (this.ticker.Exchange.SupportWebSocket(CryptoMarketClient.WebSocketType.Ticker))
            {
                this.ticker.TradeHistory.Clear();
                this.ticker.Exchange.UpdateTrades(this.ticker);
                this.ticker.StartListenTickerStream();
            }
            this.ticker.OrderBook.Changed += OnTickerOrderBookChanged;
            this.ticker.Changed += OnTickerChanged;
            this.ticker.HistoryChanged += OnTickerHistoryItemAdded;
            this.ticker.TradeHistoryChanged += OnTickerTradeHistoryAdd;
            this.ticker.OpenedOrdersChanged += OnTickerOpenedOrdersChanged;
        }

        private void OnTickerTradeHistoryAdd(object sender, EventArgs e)
        {
            //this.gvTrades.RefreshData();
        }

        private void OnTickerHistoryItemAdded(object sender, EventArgs e)
        {
        }

        private void OnTickerChanged(object sender, EventArgs e)
        {
            this.balanceMarket = this.ticker.MarketCurrencyBalance.ToString("0.00000000") + this.ticker.MarketCurrency;
            this.balanceBase = this.ticker.BaseCurrencyBalance.ToString("0.00000000") + this.ticker.BaseCurrency;
            //this.siBalance.Caption = "Balance: " + Ticker.MarketCurrencyBalance.ToString("0.00000000");
            //this.siUpdated.Caption = "Updated: " + Ticker.LastUpdateTime;
        }

        private void OnTickerOrderBookChanged(object sender, CryptoMarketClient.OrderBookEventArgs e)
        {
            //this.bidsGrid.Refresh();
            //this.asksGrid.Refresh();
            //BeginInvoke(new Action(RefreshAskGrid));
            //BeginInvoke(new Action(RefreshBidGrid));
        }

        private void OnTickerOpenedOrdersChanged(object sender, EventArgs e)
        {
            //this.gvOpenedOrders.RefreshData();
        }

        private void UpdateTickerBar() {
            this.lastValue = string.Format("{0:0.00000000} {1}", this.ticker.Last, this.ticker.BaseCurrency);
            this.change24 = string.Format("{0:0.000}%", this.ticker.Change);
            this.low24 = string.Format("{0:0.00000000} {1}", this.ticker.Hr24Low, this.ticker.BaseCurrency);
            this.high24 = string.Format("{0:0.00000000} {1}", this.ticker.Hr24High, this.ticker.BaseCurrency);
            this.volume = string.Format("{0:0.00000000} {1}", this.ticker.Volume, this.ticker.BaseCurrency);
        }
    }
